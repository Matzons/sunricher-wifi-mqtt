/*  Copyright 2013 Florian Bornkessel

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
 */

package org.sunricher.wifi.api;

import java.awt.Color;
import java.io.IOException;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.List;

/**
 * @author Florian Bornkessel
 * 
 */
public class ColorHandlerImpl implements ColorHandler {

	/**
	 * sleep between two commands in a series
	 */
	final int SLEEP = 8;

	/**
	 * sleep at the end of a command series
	 */
	final int SLEEP_AT_END = 7;

	private OutputStream os = null;

	/**
	 * Default constructor. Uses the outputstream which is generated by the
	 * {@link DeviceHandler} connect() method.
	 * 
	 * @see DeviceHandler
	 * @param os
	 */
	public ColorHandlerImpl(OutputStream os) {
		this.os = os;
	}

	@Override
	public void setRGB(List<Integer> zones, int r, int g, int b) throws IOException, InterruptedException {

	}

	@Override
	public void setHSV(List<Integer> zones, int h, int s, int v) throws IOException, InterruptedException {

	}

	@Override
	public void setRGBWithWhiteChannel(List<Integer> zones, int r, int g, int b, boolean maxBrightness)
			throws IOException, InterruptedException {

	}

	@Override
	public void setHSVwithWihiteChannel(List<Integer> zones, int h, int s, int v, boolean maxBrightness) {

	}

	@Override
	public void setR(List<Integer> zones, int value) throws IOException, InterruptedException {

	}

	@Override
	public void setG(List<Integer> zones, int value) throws InterruptedException, IOException {
	}

	@Override
	public void setB(List<Integer> zones, int value) throws InterruptedException, IOException {

	}

	@Override
	public void setW(List<Integer> zones, int value) throws InterruptedException, IOException {

	}

	@Override
	public void resetColor(List<Integer> zones) throws IOException, InterruptedException {
		this.setRGB(zones, 0, 0, 0);
		this.setW(zones, 0);
		this.setBrightness(zones, 7);
	}

	@Override
	public void togglePower(boolean powerState) throws IOException {
		// works
		byte[] data = powerState ? Constant.DATA_ON : Constant.DATA_OFF;
		os.write(this.getMessage(new ArrayList<Integer>(), data[0], data[1], data[2]));
	}

	@Override
	public void togglePower(List<Integer> zones, boolean powerState) throws IOException, InterruptedException {
		// works
		byte[] data = null;
		for (int zone : zones) {

			switch (zone) {
			case 1:
				if (powerState) {
					data = Constant.DATA_ROOM1_ON;
				} else {
					data = Constant.DATA_ROOM1_OFF;
				}
				break;
			case 2:
				if (powerState) {
					data = Constant.DATA_ROOM2_ON;
				} else {
					data = Constant.DATA_ROOM2_OFF;
				}
				break;
			case 3:
				if (powerState) {
					data = Constant.DATA_ROOM3_ON;
				} else {
					data = Constant.DATA_ROOM3_OFF;
				}
				break;
			case 4:
				if (powerState) {
					data = Constant.DATA_ROOM4_ON;
				} else {
					data = Constant.DATA_ROOM4_OFF;
				}
				break;
			case 5:
				if (powerState) {
					data = Constant.DATA_ROOM5_ON;
				} else {
					data = Constant.DATA_ROOM5_OFF;
				}
				break;
			case 6:
				if (powerState) {
					data = Constant.DATA_ROOM6_ON;
				} else {
					data = Constant.DATA_ROOM6_OFF;
				}
				break;
			case 7:
				if (powerState) {
					data = Constant.DATA_ROOM7_ON;
				} else {
					data = Constant.DATA_ROOM7_OFF;
				}
				break;
			case 8:
				if (powerState) {
					data = Constant.DATA_ROOM8_ON;
				} else {
					data = Constant.DATA_ROOM8_OFF;
				}
				break;
			}

		}
		if (null != data) {
			send(this.getMessage(zones, data[0], data[1], data[2]));
		}
	}

	@Override
	public void setBrightness(List<Integer> zones, int value) throws InterruptedException, IOException {
		// works
		if (value > 255) {
			value = 255;
		}
		if (value < 0) {
			value = 0;
		}

		byte[] data = Constant.DATA_CIRCLE_DIM;
		send(this.getMessage(zones, data[0], data[1], (byte) value));
	}

	@Override
	public void toggleColorFader(List<Integer> zones) throws IOException, InterruptedException {
	}

	@Override
	public void speedUpColorFader(List<Integer> zones) throws IOException, InterruptedException {

	}

	@Override
	public void speedDownColorFader(List<Integer> zones) throws IOException, InterruptedException {

	}

	/**
	 * set bit for the corresponding zonenumber. If array is empty no bit will
	 * be set.
	 * 
	 * @param zones
	 * @return
	 */
	private byte generateZoneByte(List<Integer> zones) {
		if (zones.size() == 0)
			return 0;

		byte result = 0;
		for (int currentZone : zones) {
			if (currentZone <= 0 || currentZone > 8) {
				continue;
			}
			result = (byte) (result | (1 << currentZone - 1));
		}
		return result;
	}

	/**
	 * see {@link #getMessage(List, byte, byte, int)}
	 * 
	 * @param zone
	 * @param category
	 * @param channel
	 * @param value
	 * @return
	 */
	private byte[] getMessage(int zone, byte category, byte channel, byte value) {
		ArrayList<Integer> zoneArray = new ArrayList<Integer>();
		zoneArray.add(zone);
		return this.getMessage(zoneArray, category, channel, value);
	}

	/**
	 * create message for LK35.
	 * 
	 * @param zones
	 *            zones will be set in zonebit
	 * @param category
	 *            see category constants (different remote layouts are grouped
	 *            in categories)
	 * @param channel
	 *            channel or button name
	 * @param value
	 *            constant or ar range (depends on function of that channel)
	 * @return generated message, ready to send
	 */
	private byte[] getMessage(List<Integer> zones, byte category, byte channel, byte value) {
		byte[] bytes = new byte[] { category, channel, value };
		//System.out.println(javax.xml.bind.DatatypeConverter.printHexBinary(bytes));
		byte[] result = new byte[12];

		// remote identifier
		result[0] = 0x55;
		result[1] = 0x33;
		result[2] = 0x61;
		result[3] = 0x39;
		result[4] = 0x02;
		// zone
		result[5] = this.generateZoneByte(zones);
		// category - rgb vaules
		result[6] = category;
		// color channel
		result[7] = channel;
		// value
		result[8] = value;
		// checksum
		result[9] = (byte) (result[8] + result[7] + result[6] + result[5] + result[4]);
		// marker bytes
		result[10] = (byte) 0xaa;
		result[11] = (byte) 0xaa;

		return result;
	}

	@Override
	public void saveCurrentColor(List<Integer> zones, int slot) throws IOException, InterruptedException {

	}
	
	
	private void send(byte[] bytes) {
		try {
			os.write(bytes);
			os.flush();
			os.write(bytes);
			os.flush();	
			os.write(bytes);
			os.flush();	
			Thread.sleep(SLEEP_AT_END);
		} catch (IOException e) {
			e.printStackTrace();
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}	
	}
}
